<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>DTS124 Test Simulator</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 20px; }
    .question { margin-bottom: 15px; }
    .choices label { display: block; margin: 4px 0; cursor: pointer; }
    .set-nav button { margin: 5px; }
    .correct { color: green; font-weight: bold; }
    .incorrect { color: red; font-weight: bold; }
    .feedback { font-size: 0.9em; color: #333; margin-left: 15px; }
    .hidden { display: none; }
    .result-box { margin: 10px 0; padding: 8px; border-left: 4px solid; }
    .result-box.correct { border-color: green; background: #e7f7e7; }
    .result-box.incorrect { border-color: red; background: #fce7e7; }
  </style>
</head>
<body>

  <h1>DTS124 — Test Simulator</h1>
  <p>50 multiple-choice questions (A/B/C). Grouped into 5 sets of 10.  
     After answering, click <strong>Submit Set</strong> to grade.</p>

  <div class="set-nav"></div>

  <div id="question-container"></div>

  <button id="submit-btn">Submit Set</button>
  <div id="set-score"></div>

  <hr>
  <h3>Overall Progress</h3>
  <div id="overall"></div>

<script>
const questions = [
  // --- only first few shown here for brevity ---
  { q: 'Which of the following is NOT a primitive data type listed in the slides?',
    choices: ['A: String', 'B: Boolean', 'C: Byte'], correct: 'A',
    feedback: 'Slides list Boolean and byte as primitive; string is not a primitive type.' },
  { q: 'A data item is best described as:',
    choices: ['A: A collection of records','B: The smallest unit of data with meaning','C: A file on disk'],
    correct: 'B',
    feedback: 'Defined as the smallest unit of data with meaning.' },
  { q: 'Which structure groups multiple data items of different types under one name?',
    choices: ['A: Array','B: Record','C: Stack'],
    correct: 'B',
    feedback: 'A record groups multiple fields of different types.' },
  // ... continue with the rest of the 50 questions ...
];

// Split into sets of 10
const sets = [];
for (let i=0;i<5;i++) sets.push(questions.slice(i*10,i*10+10));

let currentSet = 0;
let answers = Array(50).fill(null);
let submittedSets = Array(5).fill(false);
let results = {};

const container = document.getElementById('question-container');
const nav = document.querySelector('.set-nav');
const submitBtn = document.getElementById('submit-btn');
const setScore = document.getElementById('set-score');
const overall = document.getElementById('overall');

function renderNav() {
  nav.innerHTML = '';
  sets.forEach((_,idx)=>{
    const btn = document.createElement('button');
    btn.textContent = `Set ${idx+1}` + (submittedSets[idx]? ` • ${results[idx]?.score||0}/10`: '');
    btn.onclick = ()=>{ currentSet=idx; renderSet(); };
    nav.appendChild(btn);
  });
}

function renderSet() {
  container.innerHTML = '';
  setScore.innerHTML = '';
  const start = currentSet*10;
  sets[currentSet].forEach((item,i)=>{
    const globalIndex = start+i;
    const div = document.createElement('div');
    div.className = 'question';
    div.innerHTML = `<div><strong>Q${globalIndex+1}:</strong> ${item.q}</div>`;
    const choiceDiv = document.createElement('div');
    choiceDiv.className = 'choices';
    item.choices.forEach(ch=>{
      const lbl = document.createElement('label');
      const radio = document.createElement('input');
      radio.type='radio';
      radio.name='q'+globalIndex;
      radio.value=ch[0];
      if (answers[globalIndex]===ch[0]) radio.checked=true;
      radio.onchange=()=>{ answers[globalIndex]=ch[0]; };
      lbl.appendChild(radio);
      lbl.append(' '+ch);
      choiceDiv.appendChild(lbl);
    });
    div.appendChild(choiceDiv);
    // feedback if submitted
    if (submittedSets[currentSet]) {
      const r = results[currentSet].items.find(x=>x.index===globalIndex);
      const box = document.createElement('div');
      box.className = 'result-box '+(r.isCorrect? 'correct':'incorrect');
      box.innerHTML = r.isCorrect? 
        'Correct ✓' : `Incorrect ✗ — Correct: <strong>${r.correct}</strong>`;
      const fb = document.createElement('div');
      fb.className='feedback';
      fb.textContent='Feedback: '+r.feedback;
      box.appendChild(fb);
      div.appendChild(box);
    }
    container.appendChild(div);
  });
  renderNav();
}

submitBtn.onclick=()=>{
  if (submittedSets[currentSet]) return;
  const start=currentSet*10;
  const end=start+10;
  let score=0;
  const setResults=[];
  for(let i=start;i<end;i++){
    const user=answers[i];
    const correct=questions[i].correct;
    const isCorrect=(user===correct);
    if(isCorrect) score++;
    setResults.push({index:i,user,correct,isCorrect,feedback:questions[i].feedback});
  }
  results[currentSet]={items:setResults,score};
  submittedSets[currentSet]=true;
  setScore.textContent=`Set graded: ${score}/10`;
  renderSet();
  renderOverall();
};

function renderOverall(){
  const totalCorrect=Object.values(results).reduce((a,r)=>a+(r?.score||0),0);
  const graded=Object.keys(results).length*10;
  overall.textContent=`Total correct across graded sets: ${totalCorrect}/${graded}`;
}

renderSet();
renderOverall();
</script>
</body>
</html>
